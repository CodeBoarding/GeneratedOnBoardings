digraph "classes_flask" {
rankdir=BT
charset="utf-8"
"flask.ctx.AppContext" [color="black", fontcolor="black", label=<{AppContext|app<br ALIGN="LEFT"/>g<br ALIGN="LEFT"/>url_adapter<br ALIGN="LEFT"/>|pop(exc: BaseException \| None): None<br ALIGN="LEFT"/>push(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.cli.AppGroup" [color="black", fontcolor="black", label=<{AppGroup|name : str<br ALIGN="LEFT"/>|command(): t.Callable[[t.Callable[..., t.Any]], click.Command]<br ALIGN="LEFT"/>group(): t.Callable[[t.Callable[..., t.Any]], click.Group]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.blueprints.Blueprint" [color="black", fontcolor="black", label=<{Blueprint|cli<br ALIGN="LEFT"/>|get_send_file_max_age(filename: str \| None): int \| None<br ALIGN="LEFT"/>open_resource(resource: str, mode: str, encoding: str \| None): t.IO[t.AnyStr]<br ALIGN="LEFT"/>send_static_file(filename: str): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.cli.CertParamType" [color="black", fontcolor="black", label=<{CertParamType|name : str<br ALIGN="LEFT"/>path_type : Path<br ALIGN="LEFT"/>|convert(value: t.Any, param: click.Parameter \| None, ctx: click.Context \| None): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.config.Config" [color="black", fontcolor="black", label=<{Config|root_path : str \| os.PathLike[str]<br ALIGN="LEFT"/>|from_envvar(variable_name: str, silent: bool): bool<br ALIGN="LEFT"/>from_file(filename: str \| os.PathLike[str], load: t.Callable[[t.IO[t.Any]], t.Mapping[str, t.Any]], silent: bool, text: bool): bool<br ALIGN="LEFT"/>from_mapping(mapping: t.Mapping[str, t.Any] \| None): bool<br ALIGN="LEFT"/>from_object(obj: object \| str): None<br ALIGN="LEFT"/>from_prefixed_env(prefix: str): bool<br ALIGN="LEFT"/>from_pyfile(filename: str \| os.PathLike[str], silent: bool): bool<br ALIGN="LEFT"/>get_namespace(namespace: str, lowercase: bool, trim_namespace: bool): dict[str, t.Any]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.config.ConfigAttribute" [color="black", fontcolor="black", label=<{ConfigAttribute|get_converter : t.Callable[[t.Any], T] \| None<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.debughelpers.DebugFilesKeyError" [color="black", fontcolor="red", label=<{DebugFilesKeyError|msg : str<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.json.provider.DefaultJSONProvider" [color="black", fontcolor="black", label=<{DefaultJSONProvider|compact : bool \| None<br ALIGN="LEFT"/>default : t.Callable[[t.Any], t.Any]<br ALIGN="LEFT"/>ensure_ascii : bool<br ALIGN="LEFT"/>mimetype : str<br ALIGN="LEFT"/>sort_keys : bool<br ALIGN="LEFT"/>|dumps(obj: t.Any): str<br ALIGN="LEFT"/>loads(s: str \| bytes): t.Any<br ALIGN="LEFT"/>response(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.templating.DispatchingJinjaLoader" [color="black", fontcolor="black", label=<{DispatchingJinjaLoader|app : App<br ALIGN="LEFT"/>|get_source(environment: BaseEnvironment, template: str): tuple[str, str \| None, t.Callable[[], bool] \| None]<br ALIGN="LEFT"/>list_templates(): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.testing.EnvironBuilder" [color="black", fontcolor="black", label=<{EnvironBuilder|app<br ALIGN="LEFT"/>|json_dumps(obj: t.Any): str<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.templating.Environment" [color="black", fontcolor="black", label=<{Environment|app : App<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.app.Flask" [color="black", fontcolor="black", label=<{Flask|cli<br ALIGN="LEFT"/>debug<br ALIGN="LEFT"/>default_config : ImmutableDict<br ALIGN="LEFT"/>request_class : type[Request]<br ALIGN="LEFT"/>response_class : type[Response]<br ALIGN="LEFT"/>session_interface<br ALIGN="LEFT"/>|app_context(): AppContext<br ALIGN="LEFT"/>async_to_sync(func: t.Callable[..., t.Coroutine[t.Any, t.Any, t.Any]]): t.Callable[..., t.Any]<br ALIGN="LEFT"/>create_jinja_environment(): Environment<br ALIGN="LEFT"/>create_url_adapter(request: Request \| None): MapAdapter \| None<br ALIGN="LEFT"/>dispatch_request(): ft.ResponseReturnValue<br ALIGN="LEFT"/>do_teardown_appcontext(exc: BaseException \| None): None<br ALIGN="LEFT"/>do_teardown_request(exc: BaseException \| None): None<br ALIGN="LEFT"/>ensure_sync(func: t.Callable[..., t.Any]): t.Callable[..., t.Any]<br ALIGN="LEFT"/>finalize_request(rv: ft.ResponseReturnValue \| HTTPException, from_error_handler: bool): Response<br ALIGN="LEFT"/>full_dispatch_request(): Response<br ALIGN="LEFT"/>get_send_file_max_age(filename: str \| None): int \| None<br ALIGN="LEFT"/>handle_exception(e: Exception): Response<br ALIGN="LEFT"/>handle_http_exception(e: HTTPException): HTTPException \| ft.ResponseReturnValue<br ALIGN="LEFT"/>handle_user_exception(e: Exception): HTTPException \| ft.ResponseReturnValue<br ALIGN="LEFT"/>log_exception(exc_info: tuple[type, BaseException, TracebackType] \| tuple[None, None, None]): None<br ALIGN="LEFT"/>make_default_options_response(): Response<br ALIGN="LEFT"/>make_response(rv: ft.ResponseReturnValue): Response<br ALIGN="LEFT"/>make_shell_context(): dict[str, t.Any]<br ALIGN="LEFT"/>open_instance_resource(resource: str, mode: str, encoding: str \| None): t.IO[t.AnyStr]<br ALIGN="LEFT"/>open_resource(resource: str, mode: str, encoding: str \| None): t.IO[t.AnyStr]<br ALIGN="LEFT"/>preprocess_request(): ft.ResponseReturnValue \| None<br ALIGN="LEFT"/>process_response(response: Response): Response<br ALIGN="LEFT"/>raise_routing_exception(request: Request): t.NoReturn<br ALIGN="LEFT"/>request_context(environ: WSGIEnvironment): RequestContext<br ALIGN="LEFT"/>run(host: str \| None, port: int \| None, debug: bool \| None, load_dotenv: bool): None<br ALIGN="LEFT"/>send_static_file(filename: str): Response<br ALIGN="LEFT"/>test_cli_runner(): FlaskCliRunner<br ALIGN="LEFT"/>test_client(use_cookies: bool): FlaskClient<br ALIGN="LEFT"/>test_request_context(): RequestContext<br ALIGN="LEFT"/>update_template_context(context: dict[str, t.Any]): None<br ALIGN="LEFT"/>url_for(): str<br ALIGN="LEFT"/>wsgi_app(environ: WSGIEnvironment, start_response: StartResponse): cabc.Iterable[bytes]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.testing.FlaskCliRunner" [color="black", fontcolor="black", label=<{FlaskCliRunner|app<br ALIGN="LEFT"/>|invoke(cli: t.Any, args: t.Any): Result<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.testing.FlaskClient" [color="black", fontcolor="black", label=<{FlaskClient|application<br ALIGN="LEFT"/>environ_base : dict<br ALIGN="LEFT"/>preserve_context : bool<br ALIGN="LEFT"/>|open(): TestResponse<br ALIGN="LEFT"/>session_transaction(): t.Iterator[SessionMixin]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.cli.FlaskGroup" [color="black", fontcolor="black", label=<{FlaskGroup|create_app : t.Callable[..., Flask] \| None<br ALIGN="LEFT"/>load_dotenv : bool<br ALIGN="LEFT"/>set_debug_flag : bool<br ALIGN="LEFT"/>|get_command(ctx: click.Context, name: str): click.Command \| None<br ALIGN="LEFT"/>list_commands(ctx: click.Context): list[str]<br ALIGN="LEFT"/>make_context(info_name: str \| None, args: list[str], parent: click.Context \| None): click.Context<br ALIGN="LEFT"/>parse_args(ctx: click.Context, args: list[str]): list[str]<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.debughelpers.FormDataRoutingRedirect" [color="black", fontcolor="red", label=<{FormDataRoutingRedirect|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.json.provider.JSONProvider" [color="black", fontcolor="black", label=<{JSONProvider|<br ALIGN="LEFT"/>|dump(obj: t.Any, fp: t.IO[str]): None<br ALIGN="LEFT"/><I>dumps</I>(obj: t.Any): str<br ALIGN="LEFT"/>load(fp: t.IO[t.AnyStr]): t.Any<br ALIGN="LEFT"/><I>loads</I>(s: str \| bytes): t.Any<br ALIGN="LEFT"/>response(): Response<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.JSONTag" [color="black", fontcolor="black", label=<{JSONTag|key : str<br ALIGN="LEFT"/>serializer<br ALIGN="LEFT"/>|<I>check</I>(value: t.Any): bool<br ALIGN="LEFT"/>tag(value: t.Any): dict[str, t.Any]<br ALIGN="LEFT"/><I>to_json</I>(value: t.Any): t.Any<br ALIGN="LEFT"/><I>to_python</I>(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.views.MethodView" [color="black", fontcolor="black", label=<{MethodView|<br ALIGN="LEFT"/>|dispatch_request(): ft.ResponseReturnValue<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.cli.NoAppException" [color="black", fontcolor="red", label=<{NoAppException|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.sessions.NullSession" [color="black", fontcolor="black", label=<{NullSession|clear<br ALIGN="LEFT"/>pop<br ALIGN="LEFT"/>popitem<br ALIGN="LEFT"/>setdefault<br ALIGN="LEFT"/>update<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.json.tag.PassDict" [color="black", fontcolor="black", label=<{PassDict|tag<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.PassList" [color="black", fontcolor="black", label=<{PassList|tag<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.wrappers.Request" [color="black", fontcolor="black", label=<{Request|blueprint<br ALIGN="LEFT"/>blueprints<br ALIGN="LEFT"/>endpoint<br ALIGN="LEFT"/>json_module<br ALIGN="LEFT"/>max_content_length<br ALIGN="LEFT"/>max_form_memory_size<br ALIGN="LEFT"/>max_form_parts<br ALIGN="LEFT"/>routing_exception : HTTPException \| None<br ALIGN="LEFT"/>url_rule : Rule \| None<br ALIGN="LEFT"/>view_args : dict[str, t.Any] \| None<br ALIGN="LEFT"/>|on_json_loading_failed(e: ValueError \| None): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.ctx.RequestContext" [color="black", fontcolor="black", label=<{RequestContext|app<br ALIGN="LEFT"/>flashes : list[tuple[str, str]] \| None<br ALIGN="LEFT"/>request : Optional[Request]<br ALIGN="LEFT"/>session : SessionMixin \| None<br ALIGN="LEFT"/>url_adapter : NoneType<br ALIGN="LEFT"/>|copy(): RequestContext<br ALIGN="LEFT"/>match_request(): None<br ALIGN="LEFT"/>pop(exc: BaseException \| None): None<br ALIGN="LEFT"/>push(): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.wrappers.Response" [color="black", fontcolor="black", label=<{Response|autocorrect_location_header : bool<br ALIGN="LEFT"/>default_mimetype : str \| None<br ALIGN="LEFT"/>json_module<br ALIGN="LEFT"/>max_cookie_size<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>status_code<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.cli.ScriptInfo" [color="black", fontcolor="black", label=<{ScriptInfo|app_import_path : str \| None<br ALIGN="LEFT"/>create_app : t.Callable[..., Flask] \| None<br ALIGN="LEFT"/>data : dict[t.Any, t.Any]<br ALIGN="LEFT"/>load_dotenv_defaults : bool<br ALIGN="LEFT"/>set_debug_flag : bool<br ALIGN="LEFT"/>|load_app(): Flask<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.sessions.SecureCookieSession" [color="black", fontcolor="black", label=<{SecureCookieSession|accessed : bool<br ALIGN="LEFT"/>modified : bool<br ALIGN="LEFT"/>|get(key: str, default: t.Any): t.Any<br ALIGN="LEFT"/>setdefault(key: str, default: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.sessions.SecureCookieSessionInterface" [color="black", fontcolor="black", label=<{SecureCookieSessionInterface|digest_method : staticmethod<br ALIGN="LEFT"/>key_derivation : str<br ALIGN="LEFT"/>salt : str<br ALIGN="LEFT"/>serializer<br ALIGN="LEFT"/>session_class<br ALIGN="LEFT"/>|get_signing_serializer(app: Flask): URLSafeTimedSerializer \| None<br ALIGN="LEFT"/>open_session(app: Flask, request: Request): SecureCookieSession \| None<br ALIGN="LEFT"/>save_session(app: Flask, session: SessionMixin, response: Response): None<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.cli.SeparatedPathType" [color="black", fontcolor="black", label=<{SeparatedPathType|<br ALIGN="LEFT"/>|convert(value: t.Any, param: click.Parameter \| None, ctx: click.Context \| None): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.sessions.SessionInterface" [color="black", fontcolor="black", label=<{SessionInterface|null_session_class<br ALIGN="LEFT"/>pickle_based : bool<br ALIGN="LEFT"/>|get_cookie_domain(app: Flask): str \| None<br ALIGN="LEFT"/>get_cookie_httponly(app: Flask): bool<br ALIGN="LEFT"/>get_cookie_name(app: Flask): str<br ALIGN="LEFT"/>get_cookie_partitioned(app: Flask): bool<br ALIGN="LEFT"/>get_cookie_path(app: Flask): str<br ALIGN="LEFT"/>get_cookie_samesite(app: Flask): str \| None<br ALIGN="LEFT"/>get_cookie_secure(app: Flask): bool<br ALIGN="LEFT"/>get_expiration_time(app: Flask, session: SessionMixin): datetime \| None<br ALIGN="LEFT"/>is_null_session(obj: object): bool<br ALIGN="LEFT"/>make_null_session(app: Flask): NullSession<br ALIGN="LEFT"/><I>open_session</I>(app: Flask, request: Request): SessionMixin \| None<br ALIGN="LEFT"/><I>save_session</I>(app: Flask, session: SessionMixin, response: Response): None<br ALIGN="LEFT"/>should_set_cookie(app: Flask, session: SessionMixin): bool<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.sessions.SessionMixin" [color="black", fontcolor="black", label=<{SessionMixin|accessed : bool<br ALIGN="LEFT"/>modified : bool<br ALIGN="LEFT"/>new : bool<br ALIGN="LEFT"/>permanent<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.json.tag.TagBytes" [color="black", fontcolor="black", label=<{TagBytes|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TagDateTime" [color="black", fontcolor="black", label=<{TagDateTime|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TagDict" [color="black", fontcolor="black", label=<{TagDict|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TagMarkup" [color="black", fontcolor="black", label=<{TagMarkup|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TagTuple" [color="black", fontcolor="black", label=<{TagTuple|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TagUUID" [color="black", fontcolor="black", label=<{TagUUID|key : str<br ALIGN="LEFT"/>|check(value: t.Any): bool<br ALIGN="LEFT"/>to_json(value: t.Any): t.Any<br ALIGN="LEFT"/>to_python(value: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.json.tag.TaggedJSONSerializer" [color="black", fontcolor="black", label=<{TaggedJSONSerializer|default_tags : list<br ALIGN="LEFT"/>order : list[JSONTag]<br ALIGN="LEFT"/>tags : dict[str, JSONTag]<br ALIGN="LEFT"/>|dumps(value: t.Any): str<br ALIGN="LEFT"/>loads(value: str): t.Any<br ALIGN="LEFT"/>register(tag_class: type[JSONTag], force: bool, index: int \| None): None<br ALIGN="LEFT"/>tag(value: t.Any): t.Any<br ALIGN="LEFT"/>untag(value: dict[str, t.Any]): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.debughelpers.UnexpectedUnicodeError" [color="black", fontcolor="red", label=<{UnexpectedUnicodeError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.views.View" [color="black", fontcolor="black", label=<{View|decorators : t.ClassVar[list[t.Callable[..., t.Any]]]<br ALIGN="LEFT"/>init_every_request : t.ClassVar[bool]<br ALIGN="LEFT"/>methods : Optional[t.ClassVar[t.Collection[str] \| None]]<br ALIGN="LEFT"/>provide_automatic_options : Optional[t.ClassVar[bool \| None]]<br ALIGN="LEFT"/>|as_view(name: str): ft.RouteCallable<br ALIGN="LEFT"/><I>dispatch_request</I>(): ft.ResponseReturnValue<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.ctx._AppCtxGlobals" [color="black", fontcolor="black", label=<{_AppCtxGlobals|<br ALIGN="LEFT"/>|get(name: str, default: t.Any \| None): t.Any<br ALIGN="LEFT"/>pop(name: str, default: t.Any): t.Any<br ALIGN="LEFT"/>setdefault(name: str, default: t.Any): t.Any<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"flask.debughelpers.attach_enctype_error_multidict.newcls" [color="black", fontcolor="black", label=<{newcls|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"flask.cli.FlaskGroup" -> "flask.cli.AppGroup" [arrowhead="empty", arrowtail="none"];
"flask.json.provider.DefaultJSONProvider" -> "flask.json.provider.JSONProvider" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.PassDict" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.PassList" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagBytes" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagDateTime" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagDict" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagMarkup" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagTuple" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.json.tag.TagUUID" -> "flask.json.tag.JSONTag" [arrowhead="empty", arrowtail="none"];
"flask.sessions.NullSession" -> "flask.sessions.SecureCookieSession" [arrowhead="empty", arrowtail="none"];
"flask.sessions.SecureCookieSession" -> "flask.sessions.SessionMixin" [arrowhead="empty", arrowtail="none"];
"flask.sessions.SecureCookieSessionInterface" -> "flask.sessions.SessionInterface" [arrowhead="empty", arrowtail="none"];
"flask.views.MethodView" -> "flask.views.View" [arrowhead="empty", arrowtail="none"];
"flask.app.Flask" -> "flask.testing.FlaskClient" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="application", style="solid"];
"flask.cli.AppGroup" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cli", style="solid"];
"flask.cli.AppGroup" -> "flask.blueprints.Blueprint" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="cli", style="solid"];
"flask.ctx._AppCtxGlobals" -> "flask.ctx.AppContext" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="g", style="solid"];
"flask.json.tag.TaggedJSONSerializer" -> "flask.sessions.SecureCookieSessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="serializer", style="solid"];
"flask.sessions.NullSession" -> "flask.sessions.SessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="null_session_class", style="solid"];
"flask.sessions.SecureCookieSession" -> "flask.sessions.SecureCookieSessionInterface" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session_class", style="solid"];
"flask.sessions.SessionInterface" -> "flask.app.Flask" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="session_interface", style="solid"];
"flask.app.Flask" -> "flask.ctx.AppContext" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"flask.app.Flask" -> "flask.ctx.RequestContext" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"flask.app.Flask" -> "flask.testing.EnvironBuilder" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"flask.app.Flask" -> "flask.testing.FlaskCliRunner" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="app", style="solid"];
"flask.json.tag.TaggedJSONSerializer" -> "flask.json.tag.JSONTag" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="serializer", style="solid"];
}
